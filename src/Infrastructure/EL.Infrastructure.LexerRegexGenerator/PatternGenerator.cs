using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using EL.Domain.Share.Dictionaries;

namespace EL.Infrastructure.LexerRegexGenerator;

/// <summary>
/// Генератор регулярного выражения
/// </summary>
[Generator(LanguageNames.CSharp)]
public class PatternGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var tokenTypes = TokenTypes.Stream.OrderBy(type => type.Priority).ToList();
        var pattern = string.Join("|", tokenTypes.Select(type => $"(?<{type.Value}>{type.Pattern})"));
        var content = tokenTypes.Count == 0
            ? "\"\""
            : $"\"\"\"{pattern}\"\"\"";
        
        var code = $$"""
                     // <auto-generated/>
                     
                     using System.Diagnostics.CodeAnalysis;
                     
                     namespace EL.Infrastructure;
                     
                     internal partial class PatternContainer
                     {
                         [StringSyntax(StringSyntaxAttribute.Regex)]
                         public const string Value = {{content}};
                     }
                     
                     """;
        
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "PatternContainer.g.cs",
            SourceText.From(code, Encoding.UTF8)));
    }
}